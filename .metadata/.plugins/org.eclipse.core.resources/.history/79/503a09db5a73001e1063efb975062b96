package broker.sender;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.Topic;

import org.apache.activemq.ActiveMQConnectionFactory;

import service.core.ClientMessage;
import service.core.OfferMessage;
import service.core.QuotationMessage;

public class BrokerMain {
	public static Map<Long, OfferMessage> cache = new HashMap<>();

	public static void main(String args[]) throws JMSException {
		String host = args.length > 0 ? args[0] : "localhost";
		ConnectionFactory factory = new ActiveMQConnectionFactory("failover://tcp://localhost:61616");

		Connection connection = factory.createConnection();
		connection.setClientID("sender");
		Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);

		Topic applicationsTopic = session.createTopic("APPLICATIONS");
		Queue quotationsQueue = session.createQueue("QUOTATIONS");
		Queue offersQueue = session.createQueue("OFFERS");

		MessageConsumer quotationsConsumer = session.createConsumer(quotationsQueue);
		MessageProducer offersProducer = session.createProducer(offersQueue);
		MessageConsumer applicationsConsumer = session.createConsumer(applicationsTopic);
		connection.start();

		applicationsConsumer.setMessageListener(new MessageListener() {

			@Override
			public void onMessage(Message message) {

				try {

					ClientMessage request = (ClientMessage) ((ObjectMessage) message).getObject();
					OfferMessage offerMessage = new OfferMessage(request.getInfo(), new LinkedList<>());
					cache.put(Long.valueOf(request.getToken()), offerMessage);
					new Thread(() -> {
						try {
							Thread.sleep(3000);
							Message response = session.createObjectMessage(offerMessage);
							offersProducer.send(response);

							message.acknowledge();

						} catch (JMSException e) {
							e.printStackTrace();
						}
					}

					).start();
				} catch (JMSException e) {
					e.printStackTrace();
				}
			}
		});

		quotationsConsumer.setMessageListener(new MessageListener() {

			@Override
			public void onMessage(Message message) {
				try {

					message.acknowledge();
					QuotationMessage responseMessage = (QuotationMessage) ((ObjectMessage) message).getObject();

					System.out.println("Quotation received from " + responseMessage.getQuotation());
					cache.get(responseMessage.getToken()).getQuotations().add(responseMessage.getQuotation());

				} catch (JMSException e) {
					e.printStackTrace();
				}

			}
		});

	}

}
