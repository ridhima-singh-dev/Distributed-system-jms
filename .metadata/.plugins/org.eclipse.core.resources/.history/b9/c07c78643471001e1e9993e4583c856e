package broker;

import static org.junit.Assert.assertEquals;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.Topic;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.junit.Test;

import broker.sender.BrokerMain;
import service.core.ClientInfo;
import service.core.ClientMessage;
import service.core.OfferMessage;

public class BrokerTest {
	
	@Test
	public void testService() throws Exception {
		BrokerMain.main(new String[0]);
		ConnectionFactory factory = new ActiveMQConnectionFactory("failover://tcp://localhost:61616");
		Connection connection = factory.createConnection();
		connection.setClientID("test");
		Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
		Queue queue = session.createQueue("QUOTATIONS");
		Topic topic = session.createTopic("APPLICATIONS");
		MessageConsumer consumer = session.createConsumer(queue);
		MessageProducer producer = session.createProducer(topic);
		connection.start();
		ClientInfo nikiCollierInfo = new ClientInfo("Niki Collier", ClientInfo.FEMALE, 49, 1.5494, 80, false, false);
        ClientMessage nikiCollierMsg = new ClientMessage(1L, nikiCollierInfo);
        Message request = session.createObjectMessage(nikiCollierMsg);
        producer.send(request);
        
        Queue responseQueue = session.createQueue("queueResponse");
        MessageConsumer responseConsumer = session.createConsumer(responseQueue);
        Message message = responseConsumer.receive();
        Object content = ((ObjectMessage) message).getObject();
        OfferMessage offerMessage = (OfferMessage) content;

		message.acknowledge();
	    assertEquals(1L, offerMessage.getInfo());
	}

}
