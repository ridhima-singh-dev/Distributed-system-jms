package broker.sender;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.Topic;

import org.apache.activemq.ActiveMQConnectionFactory;

import service.core.ClientMessage;
import service.core.OfferMessage;
import service.core.Quotation;

public class BrokerMain {
	//public static List<Quotation> quotations = new LinkedList<>();
	public static Map<Long, OfferMessage> cache = new HashMap<>();

	public static void main(String args[]) throws JMSException {
		String host = args.length > 0 ? args[0] : "localhost";
		ConnectionFactory factory = new ActiveMQConnectionFactory("failover://tcp://localhost:61616");

		Connection connection = factory.createConnection();
		connection.setClientID("sender");
		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
		connection.start();

		Topic applicationsTopic = session.createTopic("APPLICATIONS");
		Queue quotationsQueue = session.createQueue("QUOTATIONS");
		Queue offersQueue = session.createQueue("OFFERS");
		Queue clientQueue = session.createQueue("CLIENT");

		MessageConsumer applicationsConsumer = session.createConsumer(applicationsTopic);
		MessageConsumer quotationsConsumer = session.createConsumer(quotationsQueue);
		MessageProducer offersProducer = session.createProducer(offersQueue);
		MessageProducer clientProducer = session.createProducer(clientQueue);

		Thread first = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					applicationsConsumer.setMessageListener(new MessageListener() {

						@Override
						public void onMessage(Message message) {
							try {
								// Extract the necessary information from the received message and create an
								// OfferMessage
								if (message instanceof ObjectMessage) {
									Object msgObj = ((ObjectMessage) message).getObject();
									if (msgObj instanceof ClientMessage) {
										ClientMessage request = (ClientMessage) msgObj;
										cache.put(request.getToken(), new OfferMessage(request.getInfo(), new LinkedList<>()));
										//Message requestMsg = session.createObjectMessage(request);
										offersProducer.send(message);
									}
									message.acknowledge();

								}
							} catch (JMSException e) {
								e.printStackTrace();
							}
						}

					});
				} catch (JMSException e) {
					e.printStackTrace();
				}
			}
		});
		first.start();

		Thread second = new Thread(() -> {
			try {
				quotationsConsumer.setMessageListener(new MessageListener() {

					@Override
					public void onMessage(Message QuotationMessage) {
						try {
							// Extract the necessary information from the received message and create an
							// OfferMessage
							if (QuotationMessage instanceof ObjectMessage) {
								Object msgObj = ((ObjectMessage) QuotationMessage).getObject();
							OfferMessage responseMessage = (OfferMessage) msgObj;
								/*
								 * if (msgObj instanceof OfferMessage) { OfferMessage response = (OfferMessage)
								 * msgObj; if (!cache.containsKey(response.getInfo())) { quotations.clear(); }
								 * quotations.addAll(response.getQuotations());
								 * 
								 * }
								 */
								System.out.println("Quotation received from " + responseMessage.getQuotations() );
				                cache.get(responseMessage.getInfo()).getQuotations().addAll(responseMessage.getQuotations());
								QuotationMessage.acknowledge();

							}
						} catch (JMSException e) {
							e.printStackTrace();
						}

					}
				});

			} catch (JMSException e) {
				e.printStackTrace();
			}
		});
		second.start();
		
		while (true) {
			try {
			Thread.sleep(5000);
			if (cache.size() == 0)
				continue;
			for (OfferMessage temp : cache.values()) {
				Message response = session.createObjectMessage(temp);
				clientProducer.send(response);
				response.acknowledge();
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	}
}
